--- native/Lib/subprocess.py	2022-08-05 07:45:18.000000000 -0700
+++ wasm/Lib/subprocess.py	2022-09-13 22:02:10.921551009 -0700
@@ -75,7 +75,7 @@
     _mswindows = True

 # wasm32-emscripten and wasm32-wasi do not support processes
-_can_fork_exec = sys.platform not in {"emscripten", "wasi"}
+_can_fork_exec = sys.platform not in {"emscripten"}

 if _mswindows:
     import _winapi

--- native/Modules/_posixsubprocess.c	2022-08-05 07:45:18.000000000 -0700
+++ wasm/Modules/_posixsubprocess.c	2022-09-14 10:40:07.000000000 -0700
@@ -702,6 +702,22 @@
     }
 }

+extern int python_wasm_fork_exec(char *const exec_array[],
+             char *const argv[],
+             char *const envp[],
+             const char *cwd,
+             int p2cread, int p2cwrite,
+             int c2pread, int c2pwrite,
+             int errread, int errwrite,
+             int errpipe_read, int errpipe_write,
+             int close_fds, int restore_signals,
+             int call_setsid, pid_t pgid_to_set,
+             int call_setgid, gid_t gid,
+             int call_setgroups, size_t groups_size, const gid_t *groups,
+             int call_setuid, uid_t uid, int child_umask,
+             const void *child_sigmask,
+             int *py_fds_to_keep // null or a null terminated int[]
+             );

 /* The main purpose of this wrapper function is to isolate vfork() from both
  * subprocess_fork_exec() and child_exec(). A child process created via
@@ -731,6 +747,30 @@
              PyObject *preexec_fn_args_tuple)
 {

+  // For python-wasm we MUST take care of the entire
+  //   fork --> do stuff --> exec
+  // ourselves at the node.js / zig layer, since once
+  // fork happens you can't robustly run any javascript
+  // code, but all the setup requires arbitrarily much
+  // such code to be run.  Also, doing this externally
+  // provides a clear API to implement and provide a
+  // browser version as well.  Unless we switch from node
+  // to some custom webassembly runtime of our own like wasmtime,
+  // doing this sort of thing generally via system calls can't
+  // be supported.
+  return python_wasm_fork_exec(exec_array,
+                               argv,envp,cwd,p2cread,  p2cwrite,
+                               c2pread,  c2pwrite,
+                               errread,  errwrite,
+                               errpipe_read,  errpipe_write,
+                               close_fds, restore_signals,
+                               call_setsid, pgid_to_set,
+                               call_setgid, gid,
+                               call_setgroups, groups_size, groups,
+                               call_setuid, uid, child_umask,
+                               child_sigmask,
+                               NULL);
+
     pid_t pid;

 #ifdef VFORK_USABLE
