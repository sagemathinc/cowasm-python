The patch below changes the behavior of the platform module slightly to not
use uname -p on the host, in the case of wasm32, since that makes
no sense for our use case.  Also, we change the corresponding unit test as well.

--- native/Lib/platform.py	2022-08-05 07:45:18.000000000 -0700
+++ wasm/Lib/platform.py	2022-09-12 20:53:45.000000000 -0700
@@ -663,6 +663,9 @@
         binary defaults from _default_architecture are used.

     """
+    # the bitiness is the *size of a pointer*, which is 32-bit on WASM;
+    # analyzing binaries on host system isn't robust so we hardcode this.
+    return ("32bit", linkage)
     # Use the sizeof(pointer) as default number of bits if nothing
     # else is given as default.
     if not bits:
@@ -753,6 +756,10 @@
         """
         Fall back to `uname -p`
         """
+        # Special case for WASM where on nodejs we do NOT
+        # want to get the host processor.
+        return "wasm32"
+
         try:
             import subprocess
         except ImportError:

--- native/Lib/test/test_platform.py	2022-08-05 07:45:18.000000000 -0700
+++ wasm/Lib/test/test_platform.py	2022-09-15 22:50:06.000000000 -0700
@@ -269,7 +269,7 @@
         self.assertEqual(res[:], expected)
         self.assertEqual(res[:5], expected[:5])

-    @unittest.skipIf(sys.platform in ['win32', 'OpenVMS'], "uname -p not used")
+    @unittest.skipIf(sys.platform in ['wasi', 'win32', 'OpenVMS'], "uname -p not used")
     @support.requires_subprocess()
     def test_uname_processor(self):
         """
